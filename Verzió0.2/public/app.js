document.addEventListener("DOMContentLoaded", async () => {
    const registerForm = document.getElementById("register-form");
    const loginForm = document.getElementById("login-form");
    const mapContainer = document.getElementById("map-container");

    let map; // Ide ker√ºl a t√©rk√©p

    // üöÄ T√©rk√©p inicializ√°l√°sa f√ºggv√©ny
    function initializeMap() {
        if (!map) {
            map = L.map("map").setView([47.4979, 19.0402], 10); // Budapest k√∂z√©pponttal
            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
                attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
            }).addTo(map);
        }
        setTimeout(() => {
            map.invalidateSize(); // üìå Fontos: √≠gy biztosan bet√∂lt a t√©rk√©p
        }, 500);
    }

    // üöÄ Regisztr√°ci√≥ kezel√©se
    registerForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const username = document.getElementById("register-username").value;
        const password = document.getElementById("register-password").value;

        try {
            const response = await fetch("/api/auth/register", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ username, password })
            });

            if (response.ok) {
                localStorage.setItem("token", (await response.json()).token);
                document.getElementById("auth-container").style.display = "none";
                document.getElementById("main-content").style.display = "flex";
                initializeMap(); // üìå Bet√∂ltj√ºk a t√©rk√©pet
                loadTours();
            } else {
                document.getElementById("message").textContent = "A felhaszn√°l√≥n√©v m√°r foglalt!";
                document.getElementById("message").style.color = "red";
            }
        } catch (error) {
            console.error("Hiba t√∂rt√©nt:", error);
        }
    });

    // üöÄ Bejelentkez√©s kezel√©se
    loginForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        const username = document.getElementById("login-username").value;
        const password = document.getElementById("login-password").value;

        try {
            const response = await fetch("/api/auth/login", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ username, password })
            });

            if (response.ok) {
                localStorage.setItem("token", (await response.json()).token);
                document.getElementById("auth-container").style.display = "none";
                document.getElementById("main-content").style.display = "flex";
                initializeMap(); // üìå Bet√∂ltj√ºk a t√©rk√©pet
                loadTours();
            } else {
                document.getElementById("message").textContent = "Hib√°s bejelentkez√©si adatok.";
                document.getElementById("message").style.color = "red";
            }
        } catch (error) {
            console.error("Hiba t√∂rt√©nt:", error);
        }
    });

    // üöÄ Ellen≈ërizz√ºk, hogy be van-e jelentkezve a felhaszn√°l√≥
    if (localStorage.getItem("token")) {
        document.getElementById("auth-container").style.display = "none";
        document.getElementById("main-content").style.display = "flex";
        initializeMap();
        loadTours();
    } else {
        document.getElementById("auth-container").style.display = "block";
        document.getElementById("main-content").style.display = "none";
    }
});

// üöÄ T√∫r√°k bet√∂lt√©se
async function loadTours() {
    const token = localStorage.getItem("token");
    const tourList = document.getElementById("tour-list");
    const savedTours = document.getElementById("saved-tours");

    tourList.innerHTML = ""; // √úr√≠tj√ºk a list√°t
    savedTours.innerHTML = ""; // Jobb s√°v list√°j√°t is

    try {
        const response = await fetch("/api/tours", {
            method: "GET",
            headers: { "Content-Type": "application/json", "Authorization": `Bearer ${token}` }
        });

        if (!response.ok) throw new Error("Hiba a t√∫r√°k bet√∂lt√©sekor!");

        const tours = await response.json();

        tours.forEach(tour => {
            const li = document.createElement("li");
            li.textContent = tour.name;
            savedTours.appendChild(li);

            // Ha r√°kattintanak egy t√∫r√°ra, jelenjen meg a t√©rk√©pen
            li.addEventListener("click", () => {
                console.log("T√∫ra kiv√°lasztva:", tour);
                showTourOnMap(tour);
            });
        });

    } catch (error) {
        console.error("Hiba t√∂rt√©nt a t√∫r√°k bet√∂lt√©sekor:", error);
    }
}

// üöÄ T√∫ra megjelen√≠t√©se a t√©rk√©pen
function showTourOnMap(tour) {
    if (!map) return;
    map.setView([tour.startLat, tour.startLng], 12);

    // Kit√∂r√∂lj√ºk a r√©gi r√©tegeket
    map.eachLayer(layer => {
        if (layer instanceof L.Marker || layer instanceof L.Polyline) {
            map.removeLayer(layer);
        }
    });

    // Kezd≈ë √©s v√©gpont jel√∂l√©se
    L.marker([tour.startLat, tour.startLng]).addTo(map)
        .bindPopup("Kezd≈ëpont").openPopup();
    L.marker([tour.endLat, tour.endLng]).addTo(map)
        .bindPopup("V√©gpont");

    // Ha vannak k√∂ztes pontok, vonallal √∂sszek√∂tj√ºk ≈ëket
    if (tour.waypoints && tour.waypoints.length > 0) {
        const route = [
            [tour.startLat, tour.startLng],
            ...tour.waypoints.map(p => [p.lat, p.lng]),
            [tour.endLat, tour.endLng]
        ];
        L.polyline(route, { color: "red" }).addTo(map);
    }
}
